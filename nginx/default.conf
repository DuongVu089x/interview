upstream frontend {
	server host.docker.internal:3000;
}

upstream customer_service {
	server host.docker.internal:8082;
}

upstream customer_ws {
	server host.docker.internal:8382;
}

upstream order_service {
	server host.docker.internal:8081;
}

server {
	listen 80;
	server_name localhost;

	include /etc/nginx/headers.ini;

	# Root directory for static files
	root /usr/share/nginx/html;
	index index.html;

	# Global location for CORS
	location / {
		# CORS configuration
		include /etc/nginx/cors.ini;

		# Handle preflight requests
		if ($request_method = 'OPTIONS') {
			add_header 'Access-Control-Allow-Origin' '*';
			add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
			add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
			add_header 'Access-Control-Max-Age' 1728000;
			add_header 'Content-Type' 'text/plain; charset=utf-8';
			add_header 'Content-Length' 0;
			return 204;
		}

		# Frontend proxy configuration
		include /etc/nginx/proxy.ini;
		proxy_pass http://frontend;
		error_page 404 = @fallback;
	}

	# Fallback to static file if frontend is not available
	location @fallback {
		root /usr/share/nginx/html;
		try_files /index.html =404;
	}

	# Customer Service API
	location /api/notifications {
		include /etc/nginx/cors.ini;
		include /etc/nginx/proxy.ini;
		proxy_pass http://customer_service;
	}

	# WebSocket for notifications
	location /notifications {
		include /etc/nginx/cors.ini;
		include /etc/nginx/proxy.ini;
		proxy_pass http://customer_ws;
	}

	# Order Service API
	location /api/orders {
		include /etc/nginx/cors.ini;
		include /etc/nginx/proxy.ini;
		proxy_pass http://order_service;
	}
}
