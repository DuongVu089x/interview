services:

  # config for nginx
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"

#   # config for nginx
#   nginx:
#     build:
#       context: .
#       dockerfile: ./frontend/proxy/Dockerfile
#       args:
#         - ENV=${ENV}
#     ports:
#       - "80:80"
    # volumes:
    #   - .:/usr/share/nginx/html

  # config for mongodb
  internal-mongodb1:
    image: mongo:latest
    container_name: internal-mongodb1
    hostname: internal-mongodb1
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27020", "--keyFile", "/etc/mongodb/keyfile"]
    ports:
      - "27020:27020"
    volumes:
      - ./db/mongodb/mongodb1:/data/db
      - ./db/mongodb/keyfile:/etc/mongodb/keyfile
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: admin
    networks:
      - internal-mongo-network

  internal-mongodb2:
    image: mongo:latest
    container_name: internal-mongodb2
    hostname: internal-mongodb2
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018", "--keyFile", "/etc/mongodb/keyfile"]
    ports:
      - "27018:27018"
    volumes:
      - ./db/mongodb/mongodb2:/data/db
      - ./db/mongodb/keyfile:/etc/mongodb/keyfile
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: admin
    networks:
      - internal-mongo-network

  internal-mongodb3:
    image: mongo:latest
    container_name: internal-mongodb3
    hostname: internal-mongodb3
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019", "--keyFile", "/etc/mongodb/keyfile"]
    ports:
      - "27019:27019"
    volumes:
      - ./db/mongodb/mongodb3:/data/db
      - ./db/mongodb/keyfile:/etc/mongodb/keyfile
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: admin
    networks:
      - internal-mongo-network

  # This service initializes the replica set
  mongo-init:
    image: mongo:latest
    container_name: internal-mongo-init
    depends_on:
      - internal-mongodb1
      - internal-mongodb2
      - internal-mongodb3
    command: >
      /bin/bash -c "
      echo 'Waiting for MongoDB to start...'
      sleep 100 &&
      mongosh --host internal-mongodb1 --port 27020 -u root -p example --authenticationDatabase admin --eval '
        config = {
          \"_id\": \"rs0\",
          \"members\": [
            {\"_id\": 0, \"host\": \"internal-mongodb1:27020\", \"priority\": 2},
            {\"_id\": 1, \"host\": \"internal-mongodb2:27018\", \"priority\": 1},
            {\"_id\": 2, \"host\": \"internal-mongodb3:27019\", \"priority\": 1}
          ]
        };
        rs.initiate(config);'
      "
    networks:
      - internal-mongo-network

  internal-zoo1:
    image: confluentinc/cp-zookeeper:7.5.3
    hostname: internal-zoo1
    container_name: internal-zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  internal-kafka1:
    image: confluentinc/cp-kafka:7.5.3
    hostname: internal-kafka1
    container_name: internal-kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://internal-kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "internal-zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - internal-zoo1

  internal-kafka2:
    image: confluentinc/cp-kafka:7.5.3
    hostname: internal-kafka2
    container_name: internal-kafka2
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://internal-kafka2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "internal-zoo1:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - internal-zoo1

  internal-kafka3:
    image: confluentinc/cp-kafka:7.5.3
    hostname: internal-kafka3
    container_name: internal-kafka3
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://internal-kafka3:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "internal-zoo1:2181"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - internal-zoo1

  internal-kafka-ui:
    container_name: internal-kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - internal-kafka1
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: internal-kafka1:29092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      DYNAMIC_CONFIG_ENABLED: "true" # not necessary, added for tests
      KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED: "true"
      KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED: "true"


  redis:
    image: redis:latest
    container_name: internal-redis
    hostname: internal-redis
    volumes:
      - ./db/redis:/data
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    ports:
      - "6379:6379"

networks:
  default: # This is the default network created by Docker Compose
  internal-mongo-network:
    driver: bridge
